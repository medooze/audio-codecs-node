/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (https://www.swig.org).
 * Version 4.2.0
 *
 * Do not make changes to this file unless you know what you are doing - modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */

declare const _SWIG_enum_tag: unique symbol;

export  class MediaFrameListener {
}

export  class MediaFrameListenerShared {

  get(): MediaFrameListener;
}

export  class MediaFrameProducer {

  AddMediaListener(listener: MediaFrameListenerShared): void;

  RemoveMediaListener(listener: MediaFrameListenerShared): void;
}

export  class MediaFrameProducerShared {

  get(): MediaFrameProducer;
}

export type MediaFrameType = number & { readonly [_SWIG_enum_tag]: 'MediaFrameType'; };

export  class TimeService {
}

export  class EventLoop extends TimeService {

  Start(): boolean;

  Stop(): boolean;

  constructor();
}

export  class RTPIncomingMediaStream {

  GetMediaSSRC(): any;

  GetTimeService(): TimeService;

  Mute(muting: boolean): void;
}

export  class RTPIncomingMediaStreamShared {

  get(): RTPIncomingMediaStream;
}

export  class RTPReceiver {

  SendPLI(ssrc: any): number;

  Reset(ssrc: any): number;
}

export  class RTPReceiverShared {

  get(): RTPReceiver;
}

export  class MediaFrameListenerBridge extends RTPIncomingMediaStream {

  constructor(timeService: TimeService | EventLoop, ssrc: number);

  numFrames: any;

  numPackets: any;

  numFramesDelta: any;

  numPacketsDelta: any;

  totalBytes: any;

  bitrate: any;

  minWaitedTime: any;

  maxWaitedTime: any;

  avgWaitedTime: any;

  Update(): void;

  Stop(): void;

  AddMediaListener(listener: MediaFrameListenerShared): void;

  RemoveMediaListener(listener: MediaFrameListenerShared): void;
}

export  class MediaFrameListenerBridgeShared {

  constructor(timeService: TimeService | EventLoop, ssrc: number);

  toRTPIncomingMediaStream(): RTPIncomingMediaStreamShared;

  toRTPReceiver(): RTPReceiverShared;

  toMediaFrameListener(): MediaFrameListenerShared;

  toMediaFrameProducer(): MediaFrameProducerShared;

  get(): MediaFrameListenerBridge;
}

export  class Properties {

  SetProperty(key: string, intval: number): void;

  SetProperty(key: string, val: string): void;

  SetProperty(key: string, boolval: boolean): void;

  SetProperty(key: string, floatval: number): void;

  SetIntegerProperty(key: string, intval: number): void;

  SetStringProperty(key: string, val: string): void;

  SetBooleanProperty(key: string, boolval: boolean): void;

  SetFloatProperty(key: string, floatval: number): void;

  constructor();
}

export  class AudioCodecs {

 static Initialize(): void;

 static EnableWarning(flag: boolean): void;

 static EnableLog(flag: boolean): void;

 static EnableDebug(flag: boolean): void;

 static EnableUltraDebug(flag: boolean): void;
}

export  class AudioDecoderFacade {

  Start(): number;

  SetAACConfig(config: any): void;

  AddAudioOuput(ouput: any): void;

  RemoveAudioOutput(ouput: any): void;

  SetIncoming(incomingSource: RTPIncomingMediaStreamShared): boolean;

  Stop(): number;

  constructor();
}

export  class AudioInput {
}

export  class AudioEncoderFacade {

  constructor();

  Init(input: AudioInput): number;

  AddListener(listener: MediaFrameListenerShared): boolean;

  RemoveListener(listener: MediaFrameListenerShared): boolean;

  SetAudioCodec(name: any, properties: Properties): number;

  StartEncoding(): number;

  StopEncoding(): number;

  End(): number;

  IsEncoding(): number;

  GetTimeService(): TimeService;
}

export  class AudioOutput {
}

export  class AudioPipe extends AudioInput {

  constructor(rate: number);
}


